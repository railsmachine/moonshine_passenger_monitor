#!/usr/bin/env ruby

require 'facter'
require 'timeout'

memused  = (Facter.value(:memorysize_mb).to_f - Facter.value(:memoryfree_mb).to_f)
memtotal = Facter.value(:memorysize_mb).to_f

exit 0 unless memused > (memtotal * 0.85)

limit = ARGV.shift.to_i
limit = 500 if limit == 0
puts "limit: #{limit}"

passengers = `passenger-memory-stats  | grep '<%= options[:pattern] %>' | awk '{print $1 " " $4}'`.split("\n")
passengers.each do |passenger|
  pid, memory = passenger.split(" ")
  if memory.to_i > limit
    puts "Killing passenger process: #{pid}"
    begin
      Process.kill('TERM', pid.to_i) rescue nil
      Timeout::timeout(5) do
        begin
          sleep 1
        end while !!(`ps -p #{pid}`.match pid.to_s)
      end
      puts "  TERM: Killed #{pid}"
    rescue Timeout::Error
      Process.kill('KILL', pid.to_i) rescue nil
      puts "  KILL: Killed #{pid}"
    end
  end
end
